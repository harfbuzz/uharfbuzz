name: Build + Deploy

on:
  push:
    branches: [main]
    tags: ["v*.*.*"]
  pull_request:
    branches: [main]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.x"
    - name: Install dependencies
      run: pip install cibuildwheel
    - name: Build Wheels
      run: python -m cibuildwheel --output-dir wheelhouse
    - uses: actions/upload-artifact@v2
      with:
        name: uharfbuzz-${{ matrix.os }}
        path: wheelhouse/*.whl

  deploy:
    # only run if the commit is tagged...
    if: startsWith(github.ref, 'refs/tags/v')
    # ... and all build jobs completed successfully
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.x"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools cython wheel twine
    - name: Download artifacts from build jobs
      uses: actions/download-artifact@v2
      with:
        path: wheelhouse/
    - name: Move wheels to dist/ directory
      run: |
        ls wheelhouse/*
        mkdir -p dist/
        for wheel_dir in wheelhouse/uharfbuzz*/; do
          mv "${wheel_dir}"/*.whl dist/
        done
    - name: Extract release notes from annotated tag message
      id: release_notes
      env:
        # e.g. v0.1.0a1, v1.2.0b2 or v2.3.0rc3, but not v1.0.0
        PRERELEASE_TAG_PATTERN: "v[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+([ab]|rc)[[:digit:]]+"
      run: |
        # GH checkout action doesn't preserve tag annotations, we must fetch them
        # https://github.com/actions/checkout/issues/290
        git fetch --tags --force
        # Dump tag message body to temporary .md file
        echo "$(git tag -l --format='%(contents:body)' ${{ github.ref_name }})" > "${{ runner.temp }}/release_body.md"
        # Set RELEASE_NAME env var to tag message subject
        echo "RELEASE_NAME=$(git tag -l --format='%(contents:subject)' ${{ github.ref_name }})" >> $GITHUB_ENV
        # if the tag has a pre-release suffix mark the Github Release accordingly
        if egrep -q "$PRERELEASE_TAG_PATTERN" <<< "${{ github.ref_name }}"; then
          echo "Tag contains a pre-release suffix"
          echo "IS_PRERELEASE=true" >> "$GITHUB_ENV"
        else
          echo "Tag does not contain pre-release suffix"
          echo "IS_PRERELEASE=false" >> "$GITHUB_ENV"
        fi
    - name: Create GitHub release
      id: create_release
      uses: actions/create-release@v1
      env:
        # This token is provided by Actions, you do not need to create your own token
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ env.RELEASE_NAME }}
        body_path: "${{ runner.temp }}/release_body.md"
        draft: false
        prerelease: ${{ env.IS_PRERELEASE }}
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        if [ "$IS_PRERELEASE" == true ]; then
          echo "DEBUG: This is a pre-release"
        else
          echo "DEBUG: This is a final release"
        fi
        python setup.py sdist
        twine upload dist/*
